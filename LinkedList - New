LINKEDLIST - Insertion (Begin, End , Position), Reverse, Sorting 

public class Linkedlist {
    Node head;

    class Node {
        int data;
        Node next;

        Node(int val) {
            data = val;
            next = null;
        }
    }

    Linkedlist() {
        head = null;
    }

    public void insertbegin(int val) {
        Node newnode = new Node(val);

        if (head == null) {
            head = newnode;
        } else {
            newnode.next = head;
            head = newnode;
        }
    }

    public void insertend(int val) {
        Node newnode = new Node(val);

        if (head == null) {
            head = newnode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newnode;
        }
    }
    public void insertposition(int pos, int k) {
        Node newnode = new Node(k);
        Node temp = head;

        for (int i = 1; i < pos; i++) {
            temp = temp.next;
        }
        newnode.next = temp.next;
        temp.next = newnode;
    }
    public void reverse(){
        Node prev = null;
        Node current = head;
        Node next = current.next;
        
        while (current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }
    public void sort() {
        if (head == null || head.next == null) {
            return;
        }

        Node current, index;
        int temp;

        for (current = head; current.next != null; current = current.next) {
            for (index = current.next; index != null; index = index.next) {
                if (current.data > index.data) {
                    temp = current.data;
                    current.data = index.data;
                    index.data = temp;
                }
            }
        }
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + "-->");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        Linkedlist list = new Linkedlist();

        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            int value = sc.nextInt();
            list.insertend(value);
        }

        int m = sc.nextInt();
        list.insertbegin(m);
              
        int pos = 2;
        int k = 12;
        list.insertposition(pos, k);
        
        list.reverse();
        
        list.sort();

        list.display();
    }
}
